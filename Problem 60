#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

enum enDateCompare { Before = -1, Equal = 0, After = 1 };

struct StDate 
{
	int Day, Month, Year;
};

bool isLeapYear(short Year)
{
	return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);
}

bool IsDate1BeforeDate2(StDate Date1, StDate Date2) 
{
	return (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false); 
}

bool IsDate1EqualsDate2(StDate Date1, StDate Date2)
{
	return (Date1.Year == Date2.Year) ? ((Date1.Month == Date2.Month) ? ((Date1.Day == Date2.Day) ? true : false) : false) : false;
}

short NumberOfDaysInAMonth(short Month, short Year)
{
	if (Month < 1 || Month > 12) return 0;

	short days[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
	return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) : days[Month - 1];

}

bool isLastDayInMonth(StDate Date)
{
	return (Date.Day == NumberOfDaysInAMonth(Date.Month, Date.Year));
}

bool isLastMonthInYear(short Month)
{
	return (Month == 12);
}

StDate IncreaseDateByOneDay(StDate Date)
{
	if (isLastDayInMonth(Date))
	{
		if (isLastMonthInYear(Date.Month))
		{
			Date.Day = 1;
			Date.Month = 1;
			Date.Year++;
		}
		else
		{
			Date.Day = 1;
			Date.Month++;
		}
	}
	else
	{
		Date.Day++;
	}

	return Date;
}


short ReadDay()
{
	short Day;

	cout << "\nPlease enter a Day? ";
	cin >> Day;

	return Day;
}

short ReadMonth()
{
	short Month;
	do
	{

		cout << "\nPlease enter a Month (1-12)? ";
		cin >> Month;

	} while (Month < 1 || Month > 12);

	return Month;
}

short ReadYear()
{
	short Year;

	do
	{

		cout << "\nPlease enter a year? ";
		cin >> Year;

	} while (Year <= 0);

	return Year;
}

StDate ReadFullDate()
{
	StDate Date;

	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();

	return Date;
}

bool IsDate1AfterDate2(StDate Date1, StDate Date2)
{
	return (!IsDate1BeforeDate2(Date1, Date2) && !IsDate1EqualsDate2(Date1, Date2));
}

enDateCompare CompareDates(StDate Date1, StDate Date2)
{
	if (IsDate1BeforeDate2(Date1, Date2))
		return enDateCompare::Before;
	if (IsDate1EqualsDate2(Date1, Date2))
		return enDateCompare::Equal;

	return enDateCompare::After;
}

struct StPeriod
{
	StDate StartDate;
	StDate EndDate;
};

StPeriod ReadPeriod()
{
	StPeriod Period;
	cout << "\nEnter Start Date:\n";
	Period.StartDate = ReadFullDate();

	cout << "\nEnter End Date:\n";
	Period.EndDate = ReadFullDate();

	return Period;
}

StPeriod ReadDateToCheck()
{
	StPeriod Period;
	cout << "\nEnter a Date to check:\n";
	Period.StartDate = ReadFullDate();

	Period.EndDate = Period.StartDate;

	return Period;
}

bool isOverLapPeriods(StPeriod Period1, StPeriod Period2)
{
	if (CompareDates(Period2.EndDate, Period1.StartDate) == enDateCompare::Before || CompareDates(Period2.StartDate, Period1.EndDate) == enDateCompare::After)
	{
		return false;
	}
	else
	{
		return true;
	}
}

bool IsDateWithinPeriod(StPeriod Period1, StDate Date)
{
	return !(CompareDates(Date, Period1.StartDate) == enDateCompare::Before || CompareDates(Date, Period1.EndDate) == enDateCompare::After);
}

int main() 
{
	cout << "Enter a Period: ";
	StPeriod Period1 = ReadPeriod();
	StDate Date = ReadFullDate();


	if (IsDateWithinPeriod(Period1, Date))
		cout << "\nYes, Date is within period." << endl;
	else
		cout << "\nNo, Date isn't within period." << endl;

	
	system("pause>0");
	return 0;
}
