#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

struct StDate 
{
	int Day, Month, Year;
};

bool isLeapYear(short Year)
{
	return (Year % 400 == 0) || (Year % 4 == 0 && Year % 100 != 0);
}

short NumberOfDaysInAMonth(short Month, short Year)
{
	if (Month < 1 || Month > 12)
		return 0;

	short ArrMonthDays[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

	return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) : ArrMonthDays[Month - 1];
}

short CountNumberOfDaysFromBeginningOfYear(short Day, short Month, short Year)
{
	short DaysFromBeginningOfYear = 0;

	for (short i = 0; i < Month; i++)
	{
		DaysFromBeginningOfYear += NumberOfDaysInAMonth(i, Year);
	}

	DaysFromBeginningOfYear += Day;

	return DaysFromBeginningOfYear;
}

bool IsDate1BeforeDate2(StDate Date1, StDate Date2) 
{
	return  (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false); 
}

bool IsLastDayInMonth(StDate Date) 
{
	return (Date.Day == NumberOfDaysInAMonth(Date.Month, Date.Year)); 
}

bool IsLastMonthInYear(short Month) 
{
	return (Month == 12); 
}

StDate IncreaseDateByOneDay(StDate Date)
{
	if (IsLastDayInMonth(Date)) 
	{
		if (IsLastMonthInYear(Date.Month)) 
		{ 
			Date.Month = 1;
			Date.Day = 1; 
			Date.Year++;
		}
		else 
		{
			Date.Day = 1;
			Date.Month++; 
		}
	}
	else 
	{
		Date.Day++;
	}
	return Date;
}

int GetDifferenceInDays(StDate Date1, StDate Date2, bool IncludeEndDay = false)
{
	int Days = 0;
	while(IsDate1BeforeDate2(Date1, Date2))
	{
		Days++;
		Date1 = IncreaseDateByOneDay(Date1);
	}

	return IncludeEndDay ? ++Days : Days;
}

short DayOfWeekOrder(short Day, short Month, short Year)
{
	short a = (14 - Month) / 12;
	short y = Year - a;
	short m = Month + 12 * a - 2;
	// Gregorian calendar formula (Zeller's Congruence)
	return (Day + y + (y / 4) - (y / 100) + (y / 400) + (31 * m / 12)) % 7;
}

short DayOfWeekOrder(StDate Date)
{
	return DayOfWeekOrder(Date.Day, Date.Month, Date.Year);
}

string DayShortName(short DayOfWeekOrder)
{
	string arrDayNames[] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
	return arrDayNames[DayOfWeekOrder];
}

bool isLastDayInMonth(StDate Date)
{
	return Date.Day == NumberOfDaysInAMonth(Date.Month, Date.Year);
}

bool isLastMonthInYear(short Month)
{
	return Month == 12;
}

bool isWeekEnd(StDate Date)
{
	short DayIndex = DayOfWeekOrder(Date);
	return (DayIndex == 5 || DayIndex == 6);
}

bool isBusinessDay(StDate Date)
{
	return !isWeekEnd(Date);
}


short ReadDay()
{
	short Day;

	cout << "\nPlease enter a Day? ";
	cin >> Day;

	return Day;
}

short ReadMonth()
{
	short Month;
	do
	{

		cout << "\nPlease enter a Month (1-12)? ";
		cin >> Month;

	} while (Month < 1 || Month > 12);

	return Month;
}

short ReadYear()
{
	short Year;

	do
	{

		cout << "\nPlease enter a year? ";
		cin >> Year;

	} while (Year <= 0);

	return Year;
}

StDate ReadFullDate()
{
	StDate Date;

	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();

	return Date;
}

short CalculateVacationDuration(StDate Date1, StDate Date2)
{
	short VacationDays = 0;
	
	while(IsDate1BeforeDate2(Date1, Date2))
	{
		if (isBusinessDay(Date1))
			VacationDays++;

		Date1 = IncreaseDateByOneDay(Date1);
	}

	return VacationDays;
}

int main() 
{

	cout << "Vacation starts:";
	StDate Date1 = ReadFullDate();
	cout << "\nVacation ends:";
	StDate Date2 = ReadFullDate();

	cout << "\nVacation From: " << DayShortName(DayOfWeekOrder(Date1)) << ", "; 
	cout << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

	cout << "Vacation Ends: " << DayShortName(DayOfWeekOrder(Date2)) << ", ";
	cout << Date2.Day << "/" << Date2.Month << "/" << Date2.Year << endl;

	cout << "\n\nActual vacation days is: " << CalculateVacationDuration(Date1, Date2);

	system("pause>0");
	return 0;
}
